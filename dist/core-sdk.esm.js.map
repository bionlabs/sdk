{"version":3,"file":"core-sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  MOONBEAM = 1284,\r\n  OPTIMISM = 10,\r\n  KAVA = 2222,\r\n  METIS = 1088,\r\n  KLAYTN = 8217,\r\n  GNOSIS = 100\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  ETHEREUM = 'ethereum',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  MOONBEAM = 'moonbeam',\r\n  OPTIMISM = 'optimism',\r\n  KAVA = 'kava',\r\n  METIS = 'metis',\r\n  KLAYTN = 'klaytn',\r\n  GNOSIS = 'gnosis',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types';\r\nimport { ChainId } from '../enums';\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\r\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\r\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: '',\r\n  [ChainId.PALM]: '',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\r\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\r\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\r\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\r\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\r\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\r\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\r\n};\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\r\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\r\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n  [ChainId.BSC_TESTNET]: '0x16227D60f7a0e586C66B005219dfc887D13C9531',\r\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\r\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\r\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\r\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\r\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\r\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\r\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\r\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\r\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\r\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\r\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\r\n  [ChainId.KAVA]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.METIS]: '0xEA32A96608495e54156Ae48931A7c20f0dcc1a21',\r\n};\r\n\r\nexport const BUSD_ADDRESS: AddressMap = {\r\n  [ChainId.BSC]: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n  [ChainId.BSC_TESTNET]: '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n};\r\n\r\n// export const USD_ADDRESS: AddressMap = {\r\n//   [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n//   [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\r\n//   [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\r\n//   [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n//   [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\r\n//   [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\r\n//   [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n//   [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\r\n//   [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\r\n//   [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\r\n//   [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\r\n//   [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\r\n//   [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\r\n//   [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\r\n//   [ChainId.CELO]: \"0x765DE816845861e75A25fCA122bb6898B8B1282a\",\r\n//   [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\r\n//   [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\r\n//   [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\r\n//   [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\r\n//   [ChainId.KAVA]: USDC_ADDRESS[ChainId.KAVA],\r\n//   [ChainId.METIS]: USDC_ADDRESS[ChainId.METIS],\r\n// };\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\r\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\r\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\r\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\r\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\r\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\r\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\r\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\r\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\r\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\r\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\r\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\r\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\r\n  [ChainId.KAVA]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.METIS]: '0x420000000000000000000000000000000000000A',\r\n};\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\r\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\r\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\r\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\r\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\r\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\r\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\r\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\r\n  [ChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\r\n  [ChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\r\n};\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\r\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\r\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\r\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\r\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\r\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\r\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\r\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.KAVA]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\r\n  [ChainId.METIS]: '0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0',\r\n};\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\r\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n  [ChainId.BSC_TESTNET]: '0xA11c8D9DC9b66E209Ef60F0C8D969D3CD988782c',\r\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\r\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\r\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\r\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\r\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\r\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\r\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\r\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\r\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\r\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\r\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\r\n  [ChainId.KAVA]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.METIS]: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\r\n};\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\r\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\r\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\r\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\r\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\r\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\r\n};\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\r\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\r\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\r\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\r\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\r\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\r\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\r\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\r\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\r\n};\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xca143ce32fe78f1f7019d7d551a6402fc5350c73',\r\n  [ChainId.BSC_TESTNET]: '0x6725F303b657a9451d8BA641348b6761A6CC7a17',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0x709102921812B3276A65092Fe79eDfc76c4D4AFe',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\r\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n};\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x10ed43c718714eb63d5aa57b78b54704e256024e',\r\n  [ChainId.BSC_TESTNET]: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x865bfde337C8aFBffF144Ff4C29f9404EBb22b15',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\r\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n};\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n};\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n};\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n};\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n};\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\r\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\r\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\r\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\r\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KAVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.METIS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n};\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\r\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n};\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\r\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\r\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\r\n};\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\r\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\r\n};\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\r\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\r\n};\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564';\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065';\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f';\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\r\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\r\n};\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\r\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\r\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n};\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\r\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\r\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\r\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\r\n  [ChainId.KAVA]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.METIS]: '0x1334c8e873E1cae8467156e2A81d1C8b566B2da1',\r\n};\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n};\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n};\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n};\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\r\n};\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\r\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\r\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.MATIC_TESTNET]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.BSC]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.BSC_TESTNET]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\r\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n};\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\r\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\r\n};\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  // [ChainId.ROPSTEN]: '',\r\n  // [ChainId.RINKEBY]: '',\r\n  // [ChainId.GÖRLI]: '',\r\n  // [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\r\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\r\n  // [ChainId.HECO]: '',\r\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\r\n  // [ChainId.OKEX]: '',\r\n  // [ChainId.OKEX_TESTNET]: '',\r\n  // [ChainId.PALM]: '',\r\n  // [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\r\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\r\n};\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\r\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\r\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\r\n  [ChainId.KOVAN]: ChainKey.KOVAN,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.FANTOM]: ChainKey.FANTOM,\r\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\r\n  [ChainId.XDAI]: ChainKey.XDAI,\r\n  [ChainId.BSC]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\r\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\r\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\r\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\r\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\r\n  [ChainId.HECO]: ChainKey.HECO,\r\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\r\n  [ChainId.HARMONY]: ChainKey.HARMONY,\r\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\r\n  [ChainId.OKEX]: ChainKey.OKEX,\r\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\r\n  [ChainId.CELO]: ChainKey.CELO,\r\n  [ChainId.PALM]: ChainKey.PALM,\r\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\r\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\r\n  [ChainId.FUSE]: ChainKey.FUSE,\r\n  [ChainId.TELOS]: ChainKey.TELOS,\r\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\r\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\r\n  [ChainId.KAVA]: ChainKey.KAVA,\r\n  [ChainId.METIS]: ChainKey.METIS,\r\n}\r\n","import { ChainId } from \"../enums/ChainId\";\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.ROPSTEN]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.RINKEBY]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.GÖRLI]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.KOVAN]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.FANTOM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MATIC]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MATIC_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.XDAI]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.BSC]: \"0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\",\r\n  [ChainId.BSC_TESTNET]: \"0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\",\r\n  [ChainId.ARBITRUM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONBEAM_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.AVALANCHE]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.AVALANCHE_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HECO]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HECO_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HARMONY]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HARMONY_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.OKEX]: \"0xe3ae0327539fda6ee87492b9ce166b7419808c231acd1fe54dd3fbf7754704f5\",\r\n  [ChainId.OKEX_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.CELO]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.PALM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONRIVER]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.FUSE]: \"0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5\",\r\n  [ChainId.TELOS]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONBEAM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n};\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types';\r\nimport { BUSD_ADDRESS, SUSHI_ADDRESS, USDC_ADDRESS, USDT_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses';\r\n\r\nimport { ChainId } from '../enums';\r\nimport { Token } from '../entities/Token';\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, USDC_ADDRESS[ChainId.BSC_TESTNET], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, USDC_ADDRESS[ChainId.KAVA], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, USDC_ADDRESS[ChainId.METIS], 6, 'USDC', 'USD Coin'),\r\n};\r\n\r\nexport const BUSD: TokenMap = {\r\n  [ChainId.BSC]: new Token(ChainId.BSC, BUSD_ADDRESS[ChainId.BSC], 18, 'BUSD', 'BUSD Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, BUSD_ADDRESS[ChainId.BSC_TESTNET], 18, 'BUSD', 'BUSD Coin'),\r\n};\r\n\r\nexport const USDT: TokenMap = {\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDT_ADDRESS[ChainId.OKEX], 18, 'USDT', 'USDT Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDT_ADDRESS[ChainId.BSC], 18, 'USDT', 'USDT Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, USDT_ADDRESS[ChainId.BSC_TESTNET], 18, 'USDT', 'USDT Coin'),\r\n};\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  ...USDT,\r\n  ...BUSD,\r\n  [ChainId.CELO]: new Token(ChainId.CELO, USDC_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\r\n};\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WETH9_ADDRESS[ChainId.KAVA], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WETH9_ADDRESS[ChainId.METIS], 18, 'WETH', 'Wrapped Ether'),\r\n};\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM',\r\n  ),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic',\r\n  ),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n  ),\r\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX',\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT',\r\n  ),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE',\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain',\r\n  ),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\r\n  [ChainId.MOONRIVER]: new Token(\r\n    ChainId.MOONRIVER,\r\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\r\n    18,\r\n    'WMOVR',\r\n    'Wrapped Moonriver',\r\n  ),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WNATIVE_ADDRESS[ChainId.KAVA], 18, 'WKAVA', 'Wrapped Kava'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WNATIVE_ADDRESS[ChainId.METIS], 18, 'WMETIS', 'Wrapped Metis'),\r\n};\r\n\r\nexport const SUSHI: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, SUSHI_ADDRESS[ChainId.KAVA], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, SUSHI_ADDRESS[ChainId.METIS], 18, 'SUSHI', 'SushiToken'),\r\n};\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Glmr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glmr } = {}\r\n\r\n  public static onChain(chainId: number): Glmr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Kava extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'KAVA', 'Kava')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Kava } = {}\r\n\r\n  public static onChain(chainId: number): Kava {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Metis extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'METIS', 'Metis')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Metis } = {}\r\n\r\n  public static onChain(chainId: number): Metis {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Glmr,\r\n  Harmony,\r\n  Heco,\r\n  Kava,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Palm,\r\n  Telos,\r\n  xDai,\r\n  Metis,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\r\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\r\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\r\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\r\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\r\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\r\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\r\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\r\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\r\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\r\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\r\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\r\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\r\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\r\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\r\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\r\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\r\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\r\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\r\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\r\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\r\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\r\n  [ChainId.KAVA]: Kava.onChain(ChainId.KAVA),\r\n  [ChainId.METIS]: Metis.onChain(ChainId.METIS),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { RoundingMode } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import {\r\n  FACTORY_ADDRESS,\r\n  FIVE,\r\n  MINIMUM_LIQUIDITY,\r\n  ONE,\r\n  ZERO,\r\n  _1000,\r\n  _997,\r\n} from \"../constants\";\r\nimport {\r\n  InsufficientInputAmountError,\r\n  InsufficientReservesError,\r\n} from \"../errors\";\r\n\r\nimport { BigintIsh } from \"../types\";\r\nimport { CurrencyAmount } from \"./CurrencyAmount\";\r\nimport JSBI from \"jsbi\";\r\nimport { Price } from \"./Price\";\r\nimport { Token } from \"./Token\";\r\nimport { computePairAddress } from \"../functions/computePairAddress\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { sqrt } from \"../functions/math\";\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token;\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>];\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    });\r\n  }\r\n\r\n  public constructor(\r\n    currencyAmountA: CurrencyAmount<Token>,\r\n    currencyAmountB: CurrencyAmount<Token>\r\n  ) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(\r\n      currencyAmountB.currency\r\n    ) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA];\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      \"UNI-V2\",\r\n      \"Uniswap V2\"\r\n    );\r\n    this.tokenAmounts = currencyAmounts as [\r\n      CurrencyAmount<Token>,\r\n      CurrencyAmount<Token>\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1);\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\r\n    return new Price(\r\n      this.token0,\r\n      this.token1,\r\n      result.denominator,\r\n      result.numerator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\r\n    return new Price(\r\n      this.token1,\r\n      this.token0,\r\n      result.denominator,\r\n      result.numerator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId;\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency;\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency;\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0];\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1];\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n  }\r\n\r\n  public getOutputAmount(\r\n    inputAmount: CurrencyAmount<Token>\r\n  ): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), \"TOKEN\");\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO)\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency);\r\n    const outputReserve = this.reserveOf(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    );\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\r\n    const denominator = JSBI.add(\r\n      JSBI.multiply(inputReserve.quotient, _1000),\r\n      inputAmountWithFee\r\n    );\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    );\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n    return [\r\n      outputAmount,\r\n      new Pair(\r\n        inputReserve.add(inputAmount),\r\n        outputReserve.subtract(outputAmount)\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public getInputAmount(\r\n    outputAmount: CurrencyAmount<Token>\r\n  ): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), \"TOKEN\");\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(\r\n        outputAmount.quotient,\r\n        this.reserveOf(outputAmount.currency).quotient\r\n      )\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency);\r\n    const inputReserve = this.reserveOf(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    );\r\n    const numerator = JSBI.multiply(\r\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\r\n      _1000\r\n    );\r\n    const denominator = JSBI.multiply(\r\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\r\n      _997\r\n    );\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    );\r\n    return [\r\n      inputAmount,\r\n      new Pair(\r\n        inputReserve.add(inputAmount),\r\n        outputReserve.subtract(outputAmount)\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), \"LIQUIDITY\");\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\r\n      tokenAmountB.currency\r\n    ) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    invariant(\r\n      tokenAmounts[0].currency.equals(this.token0) &&\r\n        tokenAmounts[1].currency.equals(this.token1),\r\n      \"TOKEN\"\r\n    );\r\n\r\n    let liquidity: JSBI;\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      );\r\n    } else {\r\n      const amount0 = JSBI.divide(\r\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\r\n        this.reserve0.quotient\r\n      );\r\n      const amount1 = JSBI.divide(\r\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\r\n        this.reserve1.quotient\r\n      );\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(\r\n          JSBI.multiply(\r\n            this.tokenAmounts[0].quotient,\r\n            this.tokenAmounts[1].quotient\r\n          )\r\n        ),\r\n      });\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), \"TOTAL_SUPPLY\");\r\n    invariant(liquidity.currency.equals(this.liquidityToken), \"LIQUIDITY\");\r\n    invariant(\r\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\r\n      \"LIQUIDITY\"\r\n    );\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>;\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply;\r\n    } else {\r\n      invariant(!!kLast, \"K_LAST\");\r\n      const kLastParsed = JSBI.BigInt(kLast);\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(\r\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\r\n        );\r\n        const rootKLast = sqrt(kLastParsed);\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(\r\n            totalSupply.quotient,\r\n            JSBI.subtract(rootK, rootKLast)\r\n          );\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n          const feeLiquidity = JSBI.divide(numerator, denominator);\r\n          totalSupplyAdjusted = totalSupply.add(\r\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\r\n          );\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply;\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply;\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(\r\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\r\n        totalSupplyAdjusted.quotient\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","_SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","KAVA","METIS","USDC_ADDRESS","_USDC_ADDRESS","MATIC_TESTNET","BSC_TESTNET","OPTIMISM","BUSD_ADDRESS","_BUSD_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","FANTOM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","DAI_ADDRESS","_DAI_ADDRESS","USDT_ADDRESS","_USDT_ADDRESS","MIM_ADDRESS","_MIM_ADDRESS","FRAX_ADDRESS","_FRAX_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","ROUTER_ADDRESS","_ROUTER_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","_BALANCE_FETCHER_ADDR","MULTISIG_ADDRESS","_MULTISIG_ADDRESS","CHAIN_KEY","_CHAIN_KEY","INIT_CODE_HASH","_INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","process","env","NODE_ENV","invariant","isInteger","NativeCurrency","_AbstractCurrency","_inheritsLoose","_this","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","currencyEquals","currencyA","currencyB","USDC","_USDC","BUSD","_BUSD","USDT","_USDT","USD","_extends","_extends2","WETH9","_WETH","WNATIVE","_WNATIVE","SUSHI","_SUSHI","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","Glmr","Kava","Metis","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","undefined","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}